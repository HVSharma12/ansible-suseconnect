---
- name: Fail if not running as root
  ansible.builtin.assert:
    that: ansible_user_uid == 0
    fail_msg: "This role needs to be executed as root."

- name: Assert if SUSE connect is available
  ansible.builtin.stat:
    path: "{{ suseconnect_binary }}"
  register: suseconnect_bin_check

- name: Fail if SUSE connect not available
  ansible.builtin.assert:
    that:
      - suseconnect_bin_check.stat.exists
      - suseconnect_bin_check.stat.executable
    fail_msg: "This role needs SUSEConnect available and executable!"

- name: Fail if the OS is not SUSE family
  ansible.builtin.assert:
    that: ansible_os_family == "Suse" or ansible_distribution == "SL-Micro"
    fail_msg: "This role is only supported on SUSE family operating systems."

- name: Determine if the instance is a cloud instance based on system vendor
  ansible.builtin.set_fact:
    is_cloud_instance: >-
      {{ ansible_system_vendor is search("Amazon EC2|Google|Microsoft Corporation") }}

- name: Prevent registration against SCC for PAYG instances
  when: is_cloud_instance
  block:
    - name: Ensure required packages are installed
      ansible.builtin.package:
        name: "{{ required_packages }}"
        state: present

    - name: Fail if PAYG to prevent improper registration
      ansible.builtin.command: instance-flavor-check
      register: instance_flavor_result
      changed_when: false
      failed_when: instance_flavor_result.stdout.strip() == "PAYG"

    - name: Check if registercloudguest exists in /usr/sbin
      ansible.builtin.stat:
        path: /usr/sbin/registercloudguest
      register: __registercloudguest_stat

    - name: Set flag if registercloudguest exists
      ansible.builtin.set_fact:
        __suseconnect_is_registercloudguest: "{{ __registercloudguest_stat.stat.exists }}"

- name: Save registration status into temp var
  ansible.builtin.command: "{{ suseconnect_binary }} -s"
  register: _suseconnect_status
  changed_when: false

- name: Convert Registration Status Into Usable Data Structure
  ansible.builtin.set_fact:
    suseconnect_status: |
      {{ suseconnect_status | combine({
      item['identifier']: {
        'status': item['status'],
        'version': item['version'],
        'arch': item['arch']
      }}) }}
  with_items: "{{ _suseconnect_status['stdout'] | default([]) }}"

- name: Generate List Of Product Names
  ansible.builtin.set_fact:
    suseconnect_product_list: "{{ suseconnect_products | map(attribute='product') | list }}"
