---
- name: Fail if not running as root
  ansible.builtin.assert:
    that: ansible_user_uid == 0
    fail_msg: "This role needs to be executed as root."

- name: Assert if SUSE connect is available
  ansible.builtin.stat:
    path: "{{ __suseconnect_binary }}"
  register: __suseconnect_bin_check

- name: Fail if SUSE connect not available
  ansible.builtin.assert:
    that:
      - __suseconnect_bin_check.stat.exists
      - __suseconnect_bin_check.stat.executable
    fail_msg: "This role needs SUSEConnect available and executable!"

- name: Fail if the OS is not SUSE family
  ansible.builtin.assert:
    that: ansible_os_family == "Suse" or ansible_distribution == "SL-Micro"
    fail_msg: "This role is only supported on SUSE family operating systems."

- name: "SUSEConnect - Determine if the instance is a cloud instance"
  ansible.builtin.set_fact:
    __suseconnect_is_cloud_instance: >-
      {{
        ("amazon" in ansible_system_vendor | lower) or
        ("amazon" in ansible_product_name | lower) or
        ("amazon" in ansible_product_version | lower) or
        (ansible_product_name == 'Google Compute Engine') or
        (ansible_chassis_asset_tag == 'ibmcloud') or
        (ansible_product_name == 'Virtual Machine' and ansible_chassis_vendor == 'Microsoft Corporation')
      }}

- name: Prevent registration against SCC for PAYG instances
  when: __suseconnect_is_cloud_instance
  block:
    - name: Check if registercloudguest exists in /usr/sbin
      ansible.builtin.stat:
        path: /usr/sbin/registercloudguest
      register: __suseconnect_registercloudguest_stat

    - name: Set flag if registercloudguest exists
      ansible.builtin.set_fact:
        __suseconnect_is_registercloudguest: "{{ true if __suseconnect_registercloudguest_stat.stat.exists else false }}"

    - name: Ensure required packages are installed
      ansible.builtin.package:
        name: "{{ __suseconnect_required_package }}"
        state: present

    - name: Skip if PAYG to prevent improper registration
      ansible.builtin.command:
        cmd: instance-flavor-check
      register: __suseconnect_instance_flavor_result
      changed_when: false
      failed_when: __suseconnect_instance_flavor_result.stdout.strip() not in ["PAYG", "BYOS"]

    - name: Set PAYG flag if instance is PAYG
      ansible.builtin.set_fact:
        __suseconnect_is_payg_instance: "{{ __suseconnect_instance_flavor_result.stdout.strip() == 'PAYG' }}"

    - name: Debug warning message for PAYG instance
      ansible.builtin.debug:
        msg: "Warning: This is a PAYG instance. Skipping registration steps to avoid conflicts."
      when: __suseconnect_is_payg_instance

- name: Set variables for SUSEConnect
  when: not __suseconnect_is_payg_instance
  block:
    - name: Save registration status into temp var
      ansible.builtin.command:
        cmd: "{{ __suseconnect_binary }} -s"
      register: __suseconnect_tmp_status
      changed_when: false

    - name: Convert Registration Status Into Usable Data Structure
      ansible.builtin.set_fact:
        __suseconnect_status: >-
          {{ __suseconnect_status | combine({
          item['identifier']: {
            'status': item['status'],
            'version': item['version'],
            'arch': item['arch']
          }}) }}
      loop: "{{ __suseconnect_tmp_status['stdout'] | default([]) }}"
      loop_control:
        label: "{{ item['identifier'] }}"
      # no_log: true

    - name: Generate list of subscriptions
      ansible.builtin.set_fact:
        __suseconnect_subscriptions_list: "{{ suseconnect_subscriptions | map(attribute='product') | list }}"

    - name: Set subscription command for add or remove
      ansible.builtin.set_fact:
        __suseconnect_subscribe_command: >-
          {% if ansible_distribution == 'SL-Micro' and not __suseconnect_is_registercloudguest %}
            {{ __suseconnect_commands_dict.subscription.transactional }}
          {% else %}
            {{ __suseconnect_commands_dict.subscription.general }}
          {% endif %}

    - name: Set registration command based on OS and instance type
      ansible.builtin.set_fact:
        __suseconnect_register_command: >-
          {% if __suseconnect_is_registercloudguest %}
            {{ __suseconnect_commands_dict.register.cloud }}
          {% elif ansible_distribution == 'SL-Micro' and not __suseconnect_is_registercloudguest %}
            {{ __suseconnect_commands_dict.register.transactional }}
          {% else %}
            {{ __suseconnect_commands_dict.register.general }}
          {% endif %}

    - name: Set deregistration command based on OS, instance type
      ansible.builtin.set_fact:
        __suseconnect_deregister_command: >-
          {% if __suseconnect_is_registercloudguest %}
            {{ __suseconnect_commands_dict.deregister.cloud }}
          {% elif ansible_distribution == 'SL-Micro' and not __suseconnect_is_registercloudguest %}
            {{ __suseconnect_commands_dict.deregister.transactional }}
          {% else %}
            {{ __suseconnect_commands_dict.deregister.general }}
          {% endif %}
